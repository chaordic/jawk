#!/usr/bin/env node

var vm = require("vm");

function eval_user_command(command_string) {
    var preffix = "var user_command = function user_command(d) {"
    var suffix = "}";
    // I like to live dangerously.
    eval(preffix + command_string + suffix);
    return user_command;
}

var command_string = process.argv[2];
var user_command = eval_user_command(command_string);

if (process.stdin.isTTY) {
    console.error("ERROR: We just work on PIPE'd inputs, not TTY.");
    process.exit(1);
}

// Run as long as there is stdin
process.stdin.resume();
process.stdin.setEncoding('utf8');

var chunk_buffer = "";

process.stdin.on('data', function stdin_parse(input) {
    // joining buffer
    input = chunk_buffer + input;
    chunk_buffer = "";

    var chunks = input.toString().split("\n");
    var entity;

    for (var i = 0; i < chunks.length; i++) {
        if (i == chunks.length -1) {
            // aways save the last chunk, it might be incomplete
            chunk_buffer = chunks[i];
            break;
        }

        entity = JSON.parse(chunks[i]);
        var result = user_command(entity);

        if (type(result) !== "undefined") {
            console.log(JSON.stringify(result));
        }
    }
});

process.stdin.on('end', function() {
    // process whats left on the buffer
    if (chunk_buffer) {
        entity = JSON.parse(chunk_buffer);
        console.log(JSON.stringify(user_command(entity)));
    }
});

process.on('SIGINT', function() {
    /**
     * For now we do a clean exit, later on we should check
     * for usable entities in the buffer.
     */
    process.exit(1);
});
